/* Main.ino file generated by New Project wizard
 *
 * Created:   Thu Sep 5 2013
 * Processor: ATmega328P
 * Compiler:  Arduino AVR
 */

// Peripheral Configuration Code (do not edit)
//---CONFIG_BEGIN---
#pragma GCC push_options
#pragma GCC optimize ("Os")

#pragma GCC pop_options

#include <avr/pgmspace.h>

/* Number of columns in the matrix */
#define SIZE 8

/* 74HC595 Pins */ 
#define LATCH_PIN_74HC595 12
#define CLOCK_PIN_74HC595 13
#define DATA_PIN_74HC595  11

/* Row pins controlled by the arduino */
const uint8_t ledPins[] = {2, 3, 4, 5, 6, 7, 8, 9};

/* Define the data of numbers and letters, and save them in flash area */
const uint8_t data[] PROGMEM = { 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // " " 
  0x00, 0x00, 0x21, 0x7F, 0x01, 0x00, 0x00, 0x00, // "1" 
  0x00, 0x00, 0x23, 0x45, 0x49, 0x31, 0x00, 0x00, // "2" 
  0x00, 0x00, 0x22, 0x49, 0x49, 0x36, 0x00, 0x00, // "3" 
  0x00, 0x00, 0x0E, 0x32, 0x7F, 0x02, 0x00, 0x00, // "4" 
  0x00, 0x00, 0x79, 0x49, 0x49, 0x46, 0x00, 0x00, // "5" 
  0x00, 0x00, 0x3E, 0x49, 0x49, 0x26, 0x00, 0x00, // "6" 
  0x00, 0x00, 0x60, 0x47, 0x48, 0x70, 0x00, 0x00, // "7" 
  0x00, 0x00, 0x36, 0x49, 0x49, 0x36, 0x00, 0x00, // "8" 
  0x00, 0x00, 0x32, 0x49, 0x49, 0x3E, 0x00, 0x00, // "9" 
  0x00, 0x00, 0x3E, 0x41, 0x41, 0x3E, 0x00, 0x00, // "0" 
  0x00, 0x00, 0x3F, 0x44, 0x44, 0x3F, 0x00, 0x00, // "A" 
  0x00, 0x00, 0x7F, 0x49, 0x49, 0x36, 0x00, 0x00, // "B" 
  0x00, 0x00, 0x3E, 0x41, 0x41, 0x22, 0x00, 0x00, // "C" 
  0x00, 0x00, 0x7F, 0x41, 0x41, 0x3E, 0x00, 0x00, // "D" 
  0x00, 0x00, 0x7F, 0x49, 0x49, 0x41, 0x00, 0x00, // "E" 
  0x00, 0x00, 0x7F, 0x48, 0x48, 0x40, 0x00, 0x00  // "F" 
};



/* Function protottpes */
void LedMatrix_SetupMatrixPins(uint8_t latchPin, uint8_t dataPin, uint8_t clockPin, const uint8_t* rowPins, uint8_t matrixSize);
void LedMatrix_SetPixel(byte col, byte row);
void LedMatrix_SetCols(byte value);
void LedMatrix_SetRows(byte value);
void LedMatrix_DisplayFrame(const uint8_t* data, int totalCols, int matrix_size, int image_display_interval);


/* Arduino Core functions */
void setup()
{
	Serial.begin(9600);

	/* Set pins */
	LedMatrix_SetupMatrixPins(LATCH_PIN_74HC595, DATA_PIN_74HC595, CLOCK_PIN_74HC595, ledPins, SIZE);

}

void loop()
{
	/* Set all pixels */
	for(byte i = 0; i < SIZE; i++)
	{
		for(byte j = 0; j < SIZE; j++)
		{
			LedMatrix_SetPixel(i, j);
			delay(50);
		}
	}

	/* Ligth all diagonals */
	for(byte i = 0; i < SIZE; i++)
	{
		for(byte j = 0; j < SIZE; j++)
		{
			LedMatrix_SetPixel(i, i);
			LedMatrix_SetPixel(i, SIZE - 1 - i);
			LedMatrix_SetPixel(SIZE - 1 - i, i);
			LedMatrix_SetPixel(SIZE - 1 - i, SIZE - 1 - i);
			delay(5);
		}
	}

	/* Move a line along the matrix, left to right */
	byte mask = 0x01;
	for (uint8_t col = 0; col < SIZE; col++)
	{
		LedMatrix_SetRows(0xFF);
		LedMatrix_SetCols(mask);
		delay(50);
		//LedMatrix_SetCols(0x00);
		mask <<= 1;
		delay(100);
	} 	

	/* Move a line along the matrix, left to right */
	mask = 0x01;
	for (uint8_t col = 0; col < SIZE; col++)
	{
		LedMatrix_SetRows(mask);
		LedMatrix_SetCols(0xFF);
		delay(50);
		//LedMatrix_SetCols(0x00);
		mask <<= 1;
		delay(100);
	} 

	/* Display charaters */
	LedMatrix_SetCols(0x00);
	int totalCols = sizeof(data) / sizeof(data[0]);
	LedMatrix_DisplayFrame(data, totalCols, SIZE, 10);
	
}


/* Led Matrix Component */

void LedMatrix_SetupMatrixPins(uint8_t latchPin, uint8_t dataPin, uint8_t clockPin, const uint8_t* rowPins, uint8_t matrixSize)
{
	/* Set 74HC595 pins */
	pinMode(latchPin, OUTPUT);
	pinMode(clockPin, OUTPUT);
	pinMode(dataPin, OUTPUT);

	for (uint8_t i = 0; i < matrixSize; i++) 
	{
		pinMode(rowPins[i], OUTPUT);
	}
}

void LedMatrix_SetCols(byte value)
{
	byte mask = 0x01;
	for(byte i = 0; i < SIZE; i++)
	{
		digitalWrite(ledPins[i], ((value & mask) == mask) ? LOW : HIGH);
		mask <<= 1;
	}
}


void LedMatrix_SetRows(byte value)
{
	digitalWrite(LATCH_PIN_74HC595, LOW);
	shiftOut(DATA_PIN_74HC595, CLOCK_PIN_74HC595, MSBFIRST, value);
	digitalWrite(LATCH_PIN_74HC595, HIGH);
}


void LedMatrix_SetPixel(byte col, byte row)
{
	LedMatrix_SetRows(1 << col);
	LedMatrix_SetCols(1 << row);
	delayMicroseconds(2000);
	LedMatrix_SetCols(0x00);
}

void LedMatrix_DisplayFrame(const uint8_t* data, int totalCols, int matrix_size, int image_display_interval)
{
    int scrollSteps = totalCols - matrix_size;

    for (int i = 0; i < scrollSteps; i++)
    {
        for (int k = 0; k < image_display_interval; k++)
        {
            byte col_mask = 0x01; 
            for (int j = i; j < matrix_size + i; j++)
            {
                LedMatrix_SetCols(col_mask);
                uint8_t val = pgm_read_byte_near(data + j); 
                LedMatrix_SetRows(val);
                delayMicroseconds(2000);
                LedMatrix_SetRows(0x00);
                col_mask <<= 1;
            }
        }
    }
}







